#!/usr/bin/env python
from argparse import ArgumentParser
import os
import sys
from commands import getstatusoutput
from os.path import basename, dirname, abspath, exists
from yaml import load
from os import makedirs, unlink
from hashlib import sha1
from glob import glob
import subprocess
from os import readlink
import logging
from logging import debug

def format(s, **kwds):
  return s % kwds

def star():
  return basename(sys.argv[0]).replace("Build", "")

def gzip():
  err, out = getstatusoutput("which pigz")
  if err:
    return "gzip"
  return "pigz"

def execute(command, printer=debug):
  popen = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
  lines_iterator = iter(popen.stdout.readline, b"")
  for line in lines_iterator:
    debug(line.strip("\n"))  # yield line
  output = popen.communicate()[0]
  debug(output)
  exitCode = popen.returncode
  return exitCode

def updateReferenceRepos(referenceSources, buildOrder, specs):
  # Update source reference area, if possible.
  # If the area is already there and cannot be written, assume it maintained
  # by someone else.
  #
  # If the area can be created, clone a bare repository with the sources.
  debug("Updating references.")
  for p in buildOrder:
    spec = specs[p]
    referenceRepo = "%s/%s" % (abspath(referenceSources), p) 
    writeableReference = os.access(referenceSources, os.W_OK)
    if not writeableReference and exists(referenceRepo):
      debug("Using %s as reference for %s." % (referenceRepo, p))
      spec["reference"] = referenceRepo
      continue
    if not writeableReference:
      debug("Cannot create reference for %s in specified folder.", p)
      continue
    
    err, out = getstatusoutput("mkdir -p %s" % abspath(referenceSources))
    if not "source" in spec:
      continue
    if not exists(referenceRepo):
      cmd = ["git", "clone", "--bare", spec["source"], referenceRepo]
      debug(" ".join(cmd))
      err = execute(" ".join(cmd))
    else:
      err, out = getstatusoutput("cd %s && git fetch --tags" % (referenceRepo))
    if err:
      print "Error while updating reference repos %s." % spec["source"] 
      sys.exit(1)
    spec["reference"] = referenceRepo

if __name__ == "__main__":
  parser = ArgumentParser()
  parser.add_argument("action")
  parser.add_argument("pkgname")
  parser.add_argument("--config-dir", "-c", dest="configDir", default="%sdist" % star())
  parser.add_argument("--work-dir", "-w", dest="workDir", default="sw")
  parser.add_argument("--architecture", "-a", dest="architecture", required=True)
  parser.add_argument("--jobs", "-j", dest="jobs", default=1)
  parser.add_argument("--reference-sources", dest="referenceSources", default="sw/SOURCES")
  parser.add_argument("--debug", "-d", dest="debug", action="store_true", default=False)
  args = parser.parse_args()
  
  if args.debug:
    logging.basicConfig(level=logging.DEBUG, format="%(levelname)s: %(message)s")
  else:
    logging.basicConfig(level=logging.INFO)
  
  # Setup build environment.
  if not args.action == "build":
    parser.error("Action %s unsupported" % args.action)
  packages = [args.pkgname]
  specs = {}
  buildOrder = []
  workDir = abspath(args.workDir)
  specDir = "%s/SPECS" % workDir
  if not exists(specDir):
    makedirs(specDir)

  while packages:
    p = packages.pop(0)
    if p in specs:
      buildOrder.remove(p)
      buildOrder.insert(0, p)
      continue
    d = open("%s/%s.sh" % (args.configDir, p)).read()
    header, recipe = d.split("---", 1)
    spec = load(header)
    spec["recipe"] = recipe.strip("\n")
    specs[p] = spec 
    buildOrder.insert(0, p)
    packages += spec.get('requires', [])
    open("%s/SPECS/%s.sh" % (workDir, p), "w").write(spec["recipe"])
  
  # Calculate the hashes. We do this in build order so that we can guarantee
  # that the hashes of the dependencies are calculated first.
  debug("Calculating hashes.")
  for p in buildOrder:
    spec = specs[p]
    h = sha1(spec["recipe"])
    h.update(spec["version"])
    h.update(spec["package"])
    h.update(spec.get("source", "none"))
    if "source" in spec:
      h.update(spec["tag"])
    h.update(str(spec.get("env", {})))
    h.update(str(spec.get("append_path", {})))
    h.update(str(spec.get("prepend_path", {})))
    requires = spec.get("requires", [])
    for dep in requires:
      debug(dep)
      h.update(specs[dep]["hash"])
    hash = h.hexdigest()
    spec["hash"] = hash
    debug("Hash for %s is %s" % (p, hash))
  
  # Decide how it should be called, based on the hash and what is already
  # available
  # FIXME: check in the repository as well and download tarball if already
  #        build
  debug("Checking for packages already built.")
  newBuildOrder = []
  for p in buildOrder:
    spec = specs[p]
    installations = glob("%s/%s/%s/*" % (workDir, args.architecture, p))
    # In case there is no installed software, revision is 1
    # If there is already an installed package:
    # - Remove it if we do not know its hash
    # - Use the latest number in the version, to decide its revision
    print installations
    if not installations:
      spec["revision"] = 1
      newBuildOrder.append(p)
      continue
    busyRevisions = []
    for d in installations:
      hashFile = "%s/.build-hash" % d
      if not exists(hashFile):
        rmdir("%s")
      version = basename(d)
      assert("-" in version)
      revision = int(version.rsplit("-")[-1])
      h = open(hashFile).read().strip("\n")
      # If we have an hash match, we use the old revision for the package
      # and we do not need to build it.
      if h == spec["hash"]:
        print "Package %s with hash %s is already found in %s. Not building." % (p, h, d)
        spec["revision"] = revision
      else:
        busyRevisions.append(revision)
    if not "revision" in spec:
      spec["revision"] = min(set(range(1, max(busyRevisions)+2)) - set(busyRevisions))
      newBuildOrder.append(p)
  buildOrder = newBuildOrder
  
  # If the software already exists as a tarball and has the same hash, we reuse
  # it.
  debug("Updating from tarballs")
  for p in buildOrder:
    spec = specs[p]
    tarballHashDir = format("%(workdir)s/TARS/%(architecture)s/store/%(prefix)s/%(hash)s",
                            workdir=workDir,
                            architecture=args.architecture,
                            hash=spec["hash"],
                            prefix=spec["hash"][0:2])
    tarballDir = format("%(workdir)s/TARS/%(architecture)s/",
                        workdir=workDir,
                        architecture=args.architecture,
                        hash=spec["hash"],
                        prefix=spec["hash"][0:2])
    if not exists(tarballHashDir):
      continue
    tarballName = format("%(package)s-%(version)s-%(revision)s.%(architecture)s.tar.gz",
                         package=spec["package"],
                         version=spec["version"],
                         revision=spec["revision"],
                         architecture=args.architecture)
    tarballPath = "%s/%s" % (tarballHashDir, tarballName)
    if not exists(tarballPath):
      continue

    tarballLink = "%s/%s" % (tarballDir, tarballName)
    if not exists(tarballLink):
      print "Found stale tarball in %s, deleting." % tarballPath
      continue
    
    realLink = readlink(tarballLink)
    if not realLink == tarballPath:
      print "%s points to %s but should really point to %s. Removing." % (tarballLink, realLink, tarballPath)
      for x in [tarballLink, realLink, tarballPath]:
        unlink(x)

    # If we arrived here it really means we have the correct tarball.
    # FIXME: check the checksum inside just to make sure.
    # FIXME: in case of error remove and rebuild?
    print "Unpacking %s from %s" % (p, tarballPath)
    err, out = getstatusoutput("cd %s && %s -dc | tar -x %s" % (workDir, gzip(), tarballPath))
    if err:
      print "Error while unpacking."
      print out
      exit(1)
    buildOrder.remove(p)
    
  updateReferenceRepos(args.referenceSources, buildOrder, specs)
  
  # Build everything, everytime
  for p in buildOrder:
    spec = specs[p]
    # Generate the part which sources the environment for all the dependencies.
    # Notice that we guarantee that a dependency is always sourced before the
    # parts depending on it, but we do not guaranteed anything for the order in
    # which unrelated components are activated.
    dependencies = ""
    dependenciesInit = ""
    for dep in spec.get("requires", []):
      depSpec = specs[dep]
      dependencies += format("source $WORK_DIR/%(architecture)s/%(package)s/%(version)s-%(revision)s/etc/profile.d/init.sh\n",
                             architecture=args.architecture,
                             package=dep,
                             version=depSpec["version"],
                             revision=depSpec["revision"])
      dependenciesInit += format('echo source $%(bigpackage)s_ROOT/etc/profile.d/init.sh >> $INSTALLROOT/etc/profile.d/init.sh\n',
                                architecture=args.architecture,
                                package=dep,
                                version=depSpec["version"],
                                revision=depSpec["revision"],
                                bigpackage=dep.upper())
    # Generate the part which creates the environment for the package.
    # This can be either variable set via the "env" keyword in the metadata
    # or paths which get appended via the "append_path" one.
    # By default we append LD_LIBRARY_PATH, PATH and DYLD_LIBRARY_PATH
    # FIXME: do not append variables for Mac on Linux.
    environment = ""
    for (key, value) in spec.get("env", {}).items():
      environment += format("echo 'export %(key)s=%(value)s' >> $INSTALLROOT/etc/profile.d/init.sh\n",
                             architecture=args.architecture,
                             key=key,
                             value=value,
                           )
    basePath = "%s_ROOT" % p.upper()
    pathDict = spec.get("append_path", [])

    for pathEntry in pathDict:
      key, value = pathEntry.items()[0] 
      environment += format("echo 'export %(key)s=$%(key)s:%(value)s' >> $INSTALLROOT/etc/profile.d/init.sh\n",
                             architecture=args.architecture,
                             key=key,
                             package=p,
                             revision=spec["revision"],
                             value=value,
                             version=spec["version"]
                           )

    # Same thing, but prepending the results so that they win againsty system ones.
    pathDict = [{"LD_LIBRARY_PATH": "$%s/lib" % basePath},
                {"DYLD_LIBRARY_PATH": "$%s/lib" % basePath},
                {"PATH": "$%s/bin" % basePath},
               ]
    pathDict += spec.get("prepend_path", [])

    for pathEntry in pathDict:
      key, value = pathEntry.items()[0] 
      environment += format("echo 'export %(key)s=%(value)s:$%(key)s' >> $INSTALLROOT/etc/profile.d/init.sh\n",
                             architecture=args.architecture,
                             key=key,
                             package=p,
                             revision=spec["revision"],
                             value=value,
                             version=spec["version"]
                           )

    # The actual build script.
    referenceStatement = ""
    if "reference" in spec:
      referenceStatement = "export GIT_REFERENCE=%s" % spec["reference"]
      
    debug(spec)
    cmd = format("set -e\n"
                 "export WORK_DIR=%(workDir)s\n" + 
                 dependencies + ""
                 "export CONFIG_DIR=%(configDir)s\n"
                 "export PKGNAME=%(pkgname)s\n"
                 "export PKGHASH=%(hash)s\n"
                 "export PKGVERSION=%(version)s\n"
                 "export PKGREVISION=%(revision)s\n"
                 "export ARCHITECTURE=%(architecture)s\n"
                 "export SOURCE0=%(source)s\n"
                 "export GIT_TAG=%(tag)s\n"
                 "export JOBS=${JOBS-%(jobs)s}\n"
                 "mkdir -p $WORK_DIR/BUILD $WORK_DIR/SOURCES $WORK_DIR/TARS\n"
                 "mkdir -p $WORK_DIR/SPECS $WORK_DIR/BUILDROOT $WORK_DIR/INSTALLROOT\n"
                 "export BUILDROOT=$WORK_DIR/BUILD/$ARCHITECTURE/$PKGNAME/$PKGVERSION-$PKGREVISION\n"
                 "export INSTALLROOT=$WORK_DIR/INSTALLROOT/$PKGHASH/$ARCHITECTURE/$PKGNAME/$PKGVERSION-$PKGREVISION\n"
                 "export SOURCEDIR=$WORK_DIR/SOURCES\n"
                 "rm -fr $INSTALLROOT $BUILDROOT\n"
                 "mkdir -p $INSTALLROOT $BUILDROOT\n"
                 "cd $BUILDROOT\n"
                 "rm -rf $BUILDROOT/log\n"
                 "export BUILDDIR=$BUILDROOT/$PKGNAME\n"
                 "%(referenceStatement)s\n"
                 "if [ ! \"X$SOURCE0\" = X ]; then\n"
                 "  git clone ${GIT_REFERENCE:+--reference $GIT_REFERENCE} -b ${GIT_TAG} $SOURCE0 $BUILDDIR;\n"
                 "else\n"
                 "  mkdir -p $BUILDDIR\n"
                 "fi\n"
                 "cd $BUILDDIR\n"
                 "sh -ex $WORK_DIR/SPECS/$PKGNAME.sh 2>&1 | tee $BUILDROOT/log\n"
                 "pushd $WORK_DIR/INSTALLROOT/$PKGHASH\n"
                 "echo $PKGHASH > $INSTALLROOT/.build-hash\n"
                 "mkdir -p $INSTALLROOT/etc/profile.d\n"
                 "BIGPKGNAME=`echo $PKGNAME | tr [:lower:] [:upper:]`\n"
                 "rm -f $INSTALLROOT/etc/profile.d/init.sh\n" +
                 dependenciesInit +
                 "echo \"export ${BIGPKGNAME}_ROOT=$INSTALLROOT\" >> $INSTALLROOT/etc/profile.d/init.sh\n"
                 "echo \"export ${BIGPKGNAME}_VERSION=$PKGVERSION\" >> $INSTALLROOT/etc/profile.d/init.sh\n"
                 "echo \"export ${BIGPKGNAME}_REVISION=$PKGREVISION\" >> $INSTALLROOT/etc/profile.d/init.sh\n"
                 "echo \"export ${BIGPKGNAME}_HASH=$PKGHASH\" >> $INSTALLROOT/etc/profile.d/init.sh\n" +
                 environment +
                 "cd $WORK_DIR/INSTALLROOT/$PKGHASH && grep -I -H -l -R INSTALLROOT/$PKGHASH $ARCHITECTURE/$PKGNAME/$PKGVERSION-$PKGREVISION >$INSTALLROOT/.original-unrelocated\n"
                 "echo '#!/bin/sh -e\\nif [ \"X$WORK_DIR\" = X ]; then echo \"Please, define $WORK_DIR\" ; exit 1 ; fi' > $INSTALLROOT/relocate-me.sh\n"
                 "cat $INSTALLROOT/.original-unrelocated | xargs -n1 -I{} echo \"perl -p -e \\\"s|/[^ ]*INSTALLROOT/$PKGHASH|\$WORK_DIR|g\\\" {}.unrelocated > {}\" >> $INSTALLROOT/relocate-me.sh\n"
                 "cat $INSTALLROOT/.original-unrelocated | xargs -n1 -I{} cp '{}' '{}'.unrelocated\n" +
                 "HASHPREFIX=`echo $PKGHASH | cut -b1,2`\n"
                 "mkdir -p ${WORK_DIR}/TARS/$ARCHITECTURE/store/$HASHPREFIX/$PKGHASH\n"
                 "tar czf $WORK_DIR/TARS/$ARCHITECTURE/store/$HASHPREFIX/$PKGHASH/$PKGNAME-$PKGVERSION-$PKGREVISION.$ARCHITECTURE.tar.gz .\n"
                 "ln -sf $WORK_DIR/TARS/$ARCHITECTURE/store/$HASHPREFIX/$PKGHASH/$PKGNAME-$PKGVERSION-$PKGREVISION.$ARCHITECTURE.tar.gz $WORK_DIR/TARS/$ARCHITECTURE/$PKGNAME-$PKGVERSION-$PKGREVISION.$ARCHITECTURE.tar.gz\n"
                 "cd $WORK_DIR && tar xzf $WORK_DIR/TARS/$ARCHITECTURE/$PKGNAME-$PKGVERSION-$PKGREVISION.$ARCHITECTURE.tar.gz\n"
                 "sh -ex $ARCHITECTURE/$PKGNAME/$PKGVERSION-$PKGREVISION/relocate-me.sh\n",
                 workDir=workDir,
                 configDir=abspath(args.configDir),
                 pkgname=spec["package"],
                 hash=spec["hash"],
                 version=spec["version"],
                 revision=spec["revision"],
                 architecture=args.architecture,
                 jobs=args.jobs,
                 source=spec.get("source", ""),
                 tag=spec.get("tag", ""),
                 referenceStatement=referenceStatement)
    scriptName = "%s/BUILD/%s/%s/%s-%s/build.sh" % (workDir, args.architecture, spec["package"], spec["version"], spec["revision"])
    err, out = getstatusoutput("mkdir -p %s" % dirname(scriptName))
    script = open(scriptName, "w") 
    script.write(cmd)
    script.flush()
    script.close()


    err = execute("/bin/bash -e -x %s 2>&1" % scriptName)
    if err:
      print "Error while executing %s" % scriptName
      exit(1)
